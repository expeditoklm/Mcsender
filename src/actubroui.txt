voici mon composant companies page qui listes les companies que 
javais fais statiquement sans api maintenant que jai fait mon api : 


import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component } from '@angular/core';
import { FormsModule, Validators } from '@angular/forms';
import { NzButtonModule } from 'ng-zorro-antd/button';
import { NzIconModule } from 'ng-zorro-antd/icon';
import { NzInputModule } from 'ng-zorro-antd/input';
import { NzModalModule, NzModalService } from 'ng-zorro-antd/modal';
import { NzPaginationModule } from 'ng-zorro-antd/pagination';
import { NzTableModule } from 'ng-zorro-antd/table';
import { Company } from '../models/company';
import { debounceTime, Subject } from 'rxjs';
import { CompanyCreateComponent } from '../components/company-create/company-create.component';
import { CompanyDetailsModalComponent } from '../components/company-details-modal/company-details-modal.component';
import { Router } from '@angular/router';
import { DeleteModalService } from '../../../consts/components/delete-modal/delete-modal.service';
import { ToastService } from '../../../consts/components/toast/toast.service';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-companies-page',
  standalone: true,
  imports: [
    CommonModule,
    NzTableModule,
    NzModalModule,
    NzButtonModule,
    NzInputModule,
    NzIconModule,
    FormsModule,
    NzPaginationModule,
  ],
  templateUrl: './companies-page.component.html',
  styleUrl: './companies-page.component.css',
})
export class CompaniesPageComponent {
  constructor(
    private modalService: NzModalService,
    private cdr: ChangeDetectorRef,
    private router: Router,
    private deleteModalService: DeleteModalService,
    private toastService: ToastService,
    private http: HttpClient
  ) {}

  toggleDetails(company: Company): void {
    company.deleted = !company.deleted;
  }

  companies: Company[] = [
    {
      id: 1,
      name: 'Tech Innovators',
      description: 'Entreprise spécialisée dans les solutions technologiques.',
      link_fb: 'https://facebook.com/techinnovators',
      link_tiktok: 'https://tiktok.com/@techinnovators',
      secondary_color: '#FF5733',
      primary_color: '#1D8EB8',
      tertiary_color: '#FFBD33',
      phone: '+1234567890',
      whatsapp: '+1234567890',
      location: 'New York, USA',
      link: 'https://www.techinnovators.com',
      link_insta: 'https://instagram.com/techinnovators',
      link_pinterest: 'https://pinterest.com/techinnovators',
      link_twit: 'https://twitter.com/techinnovators',
      link_youtube: 'https://youtube.com/techinnovators',
      isActive: true,
      deleted: false,
    },
  ];

  searchName = '';
  searchDesc = '';
  searchLocation = '';

  pageIndex = 1;
  pageSize = 5;
  total = this.companies.length;
  isModalVisible = false;
  valide = true;
  nonValide = false;

  private searchSubject: Subject<void> = new Subject();
  ngOnInit() {
    this.searchSubject.pipe(debounceTime(300)).subscribe(() => {
      this.pageIndex = 1;
      this.applyFilter();
    });
    this.applyFilter();
  }

  applyFilter(): void {
    const isNotInCompanyRoute = this.router.url.includes(
      '/dashboard/companies-not-confirm'
    );
    const isInCompanyRoute = this.router.url.includes('/dashboard/companies');

    if (isNotInCompanyRoute) {
      // Filtrer uniquement les utilisateurs qui ne sont pas dans l'entreprise
      this.companies = this.companies.filter(
        (company) => company.isActive == false
      );
    } else if (isInCompanyRoute) {
      // Filtrer uniquement les utilisateurs qui sont dans l'entreprise
      this.companies = this.companies.filter(
        (company) => company.isActive === true
      );
    }

    this.total = this.companies.length;
  }
  // Fonction de filtrage des utilisateurs
  get filteredCompanies(): Company[] {
    const filtered = this.companies.filter(
      (company) =>
        company.name.toLowerCase().includes(this.searchName.toLowerCase()) &&
        company.description
          .toLowerCase()
          .includes(this.searchDesc.toLowerCase()) &&
        company.location
          .toLowerCase()
          .includes(this.searchLocation.toLowerCase())
    );

    this.total = filtered.length;
    const start = (this.pageIndex - 1) * this.pageSize;
    return filtered.slice(start, start + this.pageSize);
  }
  // Fonction de recherche qui émet un événement à chaque changement
  onSearchChange(): void {
    this.searchSubject.next();
  }
  // Changer la page
  onPageIndexChange(pageIndex: number): void {
    this.pageIndex = pageIndex;
  }
  // Changer la taille de la page
  onPageSizeChange(pageSize: number): void {
    this.pageSize = pageSize;
    this.pageIndex = 1; // Revenir à la première page lors du changement de taille
  }
  // fonction pour creer un company
  openCompanyCreateModal(): void {
    const modalRef = this.modalService.create({
      nzTitle: 'Créer une entreprise',
      nzContent: CompanyCreateComponent,
      nzFooter: null,
      nzWidth: '600px',
    });

    // Récupérer les données après la fermeture du modal
    modalRef.afterClose.subscribe((result) => {
      if (result) {
        console.log('Données reçues du composant enfant :', result);
        // Traitez les données reçues ici
      }
    });
  }
  // fonction pour voir un company
  viewDetailsCompany(company: any): void {
    this.modalService.create({
      nzTitle: "Détails de l'utilisateur",
      nzContent: CompanyDetailsModalComponent,
      nzData: { company },
      nzFooter: null,
    });
  }
  // fonction pour la modification
  editCompany(company: any): void {
    console.log("Modifier l'utilisateur:", company);
    // Ajouter votre logique pour modifier l'utilisateur
  }

  
  // Ouvrir le modal avec des données spécifiques
  openDeleteModal(company: any) {
    const modalData = {
      title: 'Supprimer cette entreprise ?',
      message:
        'Êtes-vous sûr de vouloir supprimer cette entreprise ? Cette action est irréversible.',
      confirmText: 'Confirmer',
      cancelText: 'Annuler',
      callback: () => this.handleDelete(company.id),
    };

    this.deleteModalService.openModal(modalData); // Ouvrir le modal via le service
  }

  handleDelete(companyId: number): void {
    //Logique de suppression via l'API

    this.http
      .delete(`https://api.example.com/companies/${companyId}`)
      .subscribe({
        next: () => {
          console.log('Compagnie supprimée avec succès');
          this.companies = this.companies.filter(
            (company) => company.id !== companyId
          );
          let msg = 'La compagnie spprimer avec succes n0 :';
          this.toastService.showSuccess(msg + companyId);
        },
        error: (err) => {
          console.error('Erreur lors de la suppression de la compagnie', err);
          this.toastService.showError(
            'Erreur lors de la suppression de la compagnie.'
          );
        },
      });
  }
}


aide moi a reprendre mon composant a partir de mon service : 

// modal.service.ts
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Observable, throwError } from 'rxjs';
import { catchError, retry } from 'rxjs/operators';
import { environment } from '../../../environments/environment';
import { CreateCompanyDto } from '../models/createCompanyDto';
import { Company } from '../models/company';
import { UpdateCompanyDto } from '../models/updateCompanyDto';
import { ActivateCompanyDto } from '../models/activateCompanyDto';

@Injectable({
  providedIn: 'root'
})
export class CompanyService { 
  private apiUrl = `${environment.apiUrl}companies`;

  constructor(
    private http: HttpClient,
    private router: Router
  ) { }

  // Fonction pour créer une entreprise
  createCompany(createCompanyDto: CreateCompanyDto): Observable<Company> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.post<Company>(this.apiUrl, createCompanyDto, { headers }).pipe(
      retry(1),
      catchError(this.handleError)
    );
  }

  // Fonction pour mettre à jour une entreprise
  updateCompany(id: number, updateCompanyDto: UpdateCompanyDto): Observable<Company> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.put<Company>(`${this.apiUrl}/${id}`, updateCompanyDto, { headers }).pipe(
      retry(1),
      catchError(this.handleError)
    );
  }

  // Fonction pour obtenir toutes les entreprises
  getAllCompanies(): Observable<Company[]> {
    return this.http.get<Company[]>(this.apiUrl).pipe(
      retry(1),
      catchError(this.handleError)
    );
  }

  // Fonction pour obtenir une entreprise par ID
  getCompanyById(id: number): Observable<Company> {
    return this.http.get<Company>(`${this.apiUrl}/${id}`).pipe(
      retry(1),
      catchError(this.handleError)
    );
  }

  // Fonction pour supprimer une entreprise
  deleteCompany(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(
      retry(1),
      catchError(this.handleError)
    );
  }

  // Fonction pour activer une entreprise
  activateCompany(activateCompanyDto: ActivateCompanyDto): Observable<Company> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.post<Company>(`${this.apiUrl}/activate`, activateCompanyDto, { headers }).pipe(
      retry(1),
      catchError(this.handleError)
    );
  }

  // Gestion des erreurs
  private handleError(error: any) {
    let errorMessage = '';
    if (error.error instanceof ErrorEvent) {
      // Erreur côté client
      errorMessage = `Erreur : ${error.error.message}`;
    } else {
      // Erreur côté serveur
      errorMessage = `Code d'erreur : ${error.status}\nMessage : ${error.message}`;
    }
    return throwError(errorMessage);
  }
}

















































































































































































