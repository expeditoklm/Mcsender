faire le model a temps de toutes les pages



reecrit le code de ce layout (code) en lui complettant au niveau de la navbar c-a-d  la bar du haut les informarion de la personne
connecter  et au survole du profile qu'un liste deroulante s'affiche et propose des information comme voir le profil et meme
le bouton deonnection

revoir mon problemme au niveau des api par rapport a nodemailer (code erreur)
revoir mon schema prisma au niveau  de audience (il ny a pas de cle secondaire)

prendre licone de lapk transformer en format jpeg et enlever son fond

generer un composant toast (avec la command) pour afficher les messages derreur et de succes 
de sorte que je puisse lutiliser dans plusieur autre composant sans repeter son code dans le composant parent

reecrit ce composant enfant  : (code)
de sorte que je puisse lutiliser dans plusieur autre composant sans repeter son code dans le composant parent

composant create-user 
composant create-company
composant view-details

prevoir un filtre en haut de liste et des icones dans la colonne action pour :

campaigns (status) + icone
messages (status) + icone
user (role) + icone ; 






une icone de plus qui ouvre un modal pour associer plusieur entreprise a 
l'utilisateur : on pourra rechercher dans la barre de recherche et cocher et lelement cocher sera
suspendu la et on aura encore la possiblité de faire encore une autre recherche et 
cocher une deuxieme fois et ainsi de suite jusqua avoir le total des entrepise souhaiter et soumetre ;

une icone pour signaler que luilisateur est active ou desactive (optionnel:  pas d'api pour gerer ca)
user-company (isMember) + icone

une icone de plus pour action sur la page audiences pour rediriger vers la pages contact et 
lister uniquement les contacts de laudience selectionner : preremplir les filtre audience,campagnes et entreprise 





-----------------------------------------------------------------------------------------------------------------------










redige moi le dto , le controlleur et le service pour gerer le CRUD

Schemas prisma : (le model prisma et les models associée)

model User {
    id         Int      @id @default(autoincrement())
    name       String?
    username   String?
    email      String   @unique
    role       String
    password   String
    deleted    Boolean  @default(false)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Relation with UserCompany
    userCompanies UserCompany[]

    // Relation with Campaigns

    @@map("users")
}




model UserCompany {
    id         Int      @id @default(autoincrement())
    user_id    Int
    company_id Int
    deleted    Boolean  @default(false)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    isMember   Boolean  @default(false)
    // Relations
    user    User    @relation(fields: [user_id], references: [id])
    company Company @relation(fields: [company_id], references: [id])

    @@unique([user_id, company_id])
    @@map("user_company")
}

prend exemple sur les controlleurs et les services de mon module template
controlleur : (controlleur exemplaire)

import { Controller, Post, Get, Put, Delete, Param, Body, UseGuards } from '@nestjs/common';
import { TemplateService } from './template.service';
import { CreateTemplateDto } from './dto/createTemplate.dto';
import { UpdateTemplateDto } from './dto/updateTemplate.dto';
import { ApiTags, ApiOperation, ApiBody, ApiParam, ApiResponse } from '@nestjs/swagger';
import { AuthGuard } from '@nestjs/passport';

@ApiTags('Templates')  // Catégorie Swagger pour les templates
@Controller('templates')
export class TemplateController {
  constructor(private readonly templateService: TemplateService) { }


  @UseGuards(AuthGuard('jwt'))
  @Post()
  @ApiOperation({ summary: 'Créer un nouveau modèle' })  // Résumé pour Swagger
  @ApiBody({ description: 'Données pour créer un modèle', type: CreateTemplateDto })  // Corps de la requête attendu
  @ApiResponse({ status: 201, description: 'Modèle créé avec succès.' })  // Réponse attendue
  async create(@Body() createTemplateDto: CreateTemplateDto) {
    return this.templateService.create(createTemplateDto);
  }


  @UseGuards(AuthGuard('jwt'))
  @Get()
  @ApiOperation({ summary: 'Obtenir tous les modèles' })  // Décrit l'opération pour obtenir tous les modèles
  @ApiResponse({ status: 200, description: 'Modèles obtenus avec succès.' })  // Réponse attendue
  async findAll() {
    return this.templateService.findAll();
  }


  @UseGuards(AuthGuard('jwt'))
  @Get(':id')
  @ApiOperation({ summary: 'Obtenir un modèle par son ID' })  // Décrit l'opération pour obtenir un modèle spécifique
  @ApiParam({ name: 'id', description: 'ID du modèle' })  // Paramètre ID
  @ApiResponse({ status: 200, description: 'Modèle trouvé.' })  // Réponse attendue
  @ApiResponse({ status: 404, description: 'Modèle non trouvé.' })  // Réponse en cas d'erreur
  async findOne(@Param('id') id: number) {
    return this.templateService.findOne(+id);
  }


  @UseGuards(AuthGuard('jwt'))
  @Put(':id')
  @ApiOperation({ summary: 'Mettre à jour un modèle existant' })  // Décrit l'opération de mise à jour
  @ApiParam({ name: 'id', description: 'ID du modèle à mettre à jour' })  // Paramètre ID
  @ApiBody({ description: 'Données pour mettre à jour le modèle', type: UpdateTemplateDto })  // Corps de la requête attendu
  @ApiResponse({ status: 200, description: 'Modèle mis à jour.' })  // Réponse attendue
  @ApiResponse({ status: 404, description: 'Modèle non trouvé.' })  // Réponse en cas d'erreur
  async update(@Param('id') id: number, @Body() updateTemplateDto: UpdateTemplateDto) {
    return this.templateService.update(+id, updateTemplateDto);
  }


  @UseGuards(AuthGuard('jwt'))
  @Delete(':id')
  @ApiOperation({ summary: 'Supprimer un modèle' })  // Décrit l'opération de suppression
  @ApiParam({ name: 'id', description: 'ID du modèle à supprimer' })  // Paramètre ID
  @ApiResponse({ status: 200, description: 'Modèle supprimé.' })  // Réponse attendue
  @ApiResponse({ status: 404, description: 'Modèle non trouvé.' })  // Réponse en cas d'erreur
  async remove(@Param('id') id: number) {
    return this.templateService.remove(+id);
  }


  @UseGuards(AuthGuard('jwt'))
  @Post('apply')
  @ApiOperation({ summary: 'Appliquer un modèle à une campagne' })  // Décrit l'opération pour appliquer un modèle à une campagne
  @ApiBody({
    description: 'Données pour appliquer un modèle à une campagne',
    schema: {
      type: 'object',
      properties: {
        templateId: { type: 'number', description: 'ID du modèle' },
        campaignId: { type: 'number', description: 'ID de la campagne' },
      },
    },
  })  // Corps de la requête attendu
  @ApiResponse({ status: 200, description: 'Modèle appliqué à la campagne avec succès.' })  // Réponse attendue
  @ApiResponse({ status: 400, description: 'Échec de l\'application du modèle à la campagne.' })  // Réponse en cas d'erreur
  async applyTemplateToCampaign(
    @Body('templateId') templateId: number,
    @Body('campaignId') campaignId: number,
  ) {
    return this.templateService.applyTemplateToCampaign(templateId, campaignId);
  }


  @UseGuards(AuthGuard('jwt'))
  @Get('preview/:id')
  @ApiOperation({ summary: 'Prévisualiser un modèle' })  // Décrit l'opération pour prévisualiser un modèle
  @ApiParam({ name: 'id', description: 'ID du modèle à prévisualiser' })  // Paramètre ID
  @ApiResponse({ status: 200, description: 'Prévisualisation du modèle réussie.' })  // Réponse attendue
  @ApiResponse({ status: 404, description: 'Modèle non trouvé pour la prévisualisation.' })  // Réponse en cas d'erreur
  async previewTemplate(@Param('id') templateId: number) {
    return this.templateService.previewTemplate(+templateId);
  }
}


service : (service exemplaire)


import { Injectable, NotFoundException, BadRequestException, ConflictException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateTemplateDto } from './dto/createTemplate.dto';
import { UpdateTemplateDto } from './dto/updateTemplate.dto';

@Injectable()
export class TemplateService {
  constructor(private readonly prisma: PrismaService) {}

  // Créer un nouveau Template
  async create(createTemplateDto: CreateTemplateDto) {
    // Vérification des champs obligatoires
    const { content, template_type_id, channel_id } = createTemplateDto;

    if (!content) {
      throw new BadRequestException('Le champ "contenu" est requis pour créer un modèle.');
    }
    if (!template_type_id) {
      throw new BadRequestException('L\'ID du type de modèle est requis pour créer un modèle.');
    }
    if (!channel_id) {
      throw new BadRequestException('L\'ID du canal est requis pour créer un modèle.');
    }

    // Validation des IDs
    if (isNaN(template_type_id) || template_type_id <= 0) {
      throw new BadRequestException('L\'ID du type de modèle doit être un nombre valide supérieur à zéro.');
    }
    if (isNaN(channel_id) || channel_id <= 0) {
      throw new BadRequestException('L\'ID du canal doit être un nombre valide supérieur à zéro.');
    }

    // Vérifier l'existence du type de modèle
    const templateTypeExists = await this.prisma.templateType.findUnique({
      where: { id: template_type_id },
    });

    if (!templateTypeExists) {
      throw new NotFoundException(`Le type de modèle avec l'ID ${template_type_id} n'existe pas.`);
    }

    // Vérifier l'existence du canal
    const channelExists = await this.prisma.channel.findUnique({
      where: { id: channel_id },
    });

    if (!channelExists) {
      throw new NotFoundException(`Le canal avec l'ID ${channel_id} n'existe pas.`);
    }

    // Vérifier la duplication du modèle
    const existingTemplate = await this.prisma.template.findFirst({
      where: {
        content: createTemplateDto.content,
        template_type_id: createTemplateDto.template_type_id,
        deleted: false,  // S'assurer que ce n'est pas un modèle supprimé
      },
    });

    if (existingTemplate) {
      throw new ConflictException('Un modèle avec les mêmes détails existe déjà.');
    }

    // Création du modèle
    return this.prisma.template.create({
      data: {
        name: createTemplateDto.name,
        content: createTemplateDto.content,
        template_type_id,
      },
    });
  }

  // Récupérer tous les Templates
  async findAll() {
    try {
      return await this.prisma.template.findMany({
        where: { deleted: false },  // Ne retourner que les modèles non supprimés
        include: {
          templateType: true,
        },
      });
    } catch (error) {
      throw new BadRequestException('Erreur lors de la récupération des modèles.');
    }
  }

  // Récupérer un Template par ID
  async findOne(id: number) {
    if (isNaN(id) || id <= 0) {
      throw new BadRequestException('L\'ID du modèle doit être un nombre valide supérieur à zéro.');
    }

    const template = await this.prisma.template.findUnique({
      where: { id },
      include: {
        templateType: true,
      },
    });

    if (!template || template.deleted) {
      throw new NotFoundException(`Aucun modèle trouvé avec l'ID ${id}.`);
    }

    return template;
  }

  // Mettre à jour un Template
  async update(id: number, updateTemplateDto: UpdateTemplateDto) {
    if (isNaN(id) || id <= 0) {
      throw new BadRequestException('L\'ID du modèle doit être un nombre valide supérieur à zéro.');
    }

    const template = await this.prisma.template.findUnique({
      where: { id },
    });

    if (!template) {
      throw new NotFoundException(`Aucun modèle trouvé avec l'ID ${id}.`);
    }

    if (template.deleted) {
      throw new BadRequestException('Ce modèle a été supprimé et ne peut pas être mis à jour.');
    }

    // Valider le type de modèle et le canal si fournis
    if (updateTemplateDto.template_type_id && (isNaN(updateTemplateDto.template_type_id) || updateTemplateDto.template_type_id <= 0)) {
      throw new BadRequestException('L\'ID du type de modèle doit être un nombre valide supérieur à zéro.');
    }
    if (updateTemplateDto.channel_id && (isNaN(updateTemplateDto.channel_id) || updateTemplateDto.channel_id <= 0)) {
      throw new BadRequestException('L\'ID du canal doit être un nombre valide supérieur à zéro.');
    }

    return this.prisma.template.update({
      where: { id },
      data: updateTemplateDto,
    });
  }

  // Supprimer un Template
  async remove(id: number) {
    if (isNaN(id) || id <= 0) {
      throw new BadRequestException('L\'ID du modèle doit être un nombre valide supérieur à zéro.');
    }

    const template = await this.prisma.template.findUnique({
      where: { id },
    });

    if (!template || template.deleted) {
      throw new NotFoundException(`Aucun modèle trouvé avec l'ID ${id} ou il est déjà supprimé.`);
    }

    return this.prisma.template.update({
      where: { id },
      data: { deleted: true },
    });
  }

  // Appliquer un template à une campagne
  async applyTemplateToCampaign(templateId: number, campaignId: number) {
    if (isNaN(templateId) || templateId <= 0) {
      throw new BadRequestException('L\'ID du modèle doit être un nombre valide supérieur à zéro.');
    }

    if (isNaN(campaignId) || campaignId <= 0) {
      throw new BadRequestException('L\'ID de la campagne doit être un nombre valide supérieur à zéro.');
    }

    const template = await this.prisma.template.findUnique({
      where: { id: templateId },
    });

    if (!template || template.deleted) {
      throw new NotFoundException(`Aucun modèle trouvé avec l'ID ${templateId} ou il a été supprimé.`);
    }

    // Logique d'application du modèle à la campagne
    return `Le modèle avec l'ID ${templateId} a été appliqué à la campagne avec l'ID ${campaignId}.`;
  }

  // Prévisualiser un template
  async previewTemplate(templateId: number) {
    if (isNaN(templateId) || templateId <= 0) {
      throw new BadRequestException('L\'ID du modèle doit être un nombre valide supérieur à zéro.');
    }

    const template = await this.prisma.template.findUnique({
      where: { id: templateId },
    });

    if (!template || template.deleted) {
      throw new NotFoundException(`Aucun modèle trouvé avec l'ID ${templateId} ou il a été supprimé.`);
    }

    return {
      id: template.id,
      name: template.name,
      content: template.content,
      template_type_id: template.template_type_id,
    };
  }
}





------------------------------------------------------------------------------------------------


complete moi ce service angular : 


// modal.service.ts
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { User } from '../../users/models/user';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class UserService { 
  constructor(
    private http: HttpClient,
    private router: Router
  ) { }

  private registerUrl = `${environment.apiUrl}auth/signup`;


//   signUp(userDto: User) {
//     const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
//     return this.http.post(this.registerUrl, userDto, { headers });
//   }

} 
. voici mon controlleur nest js : (service generer)








--------------------------------------------------------------------------------------


voici mon composant user page qui listes les users que 
javais fais statiquement sans api maintenant que jai fait mon api : (le composant page angular)
aide moi a reprendre mon composant a partir de mon service : 






voici mon composant createuser page qui creer les users que 
javais fais statiquement sans api maintenant que jai fait mon api : (le composant page angular)
aide moi a reprendre mon composant a partir de mon service : 


































      https://temp-mail.org/fr/

























































































<pre *ngIf="!isLoading">{{ companies | json }}</pre>





















































import { Component, Input } from '@angular/core';
import { NzModalRef } from 'ng-zorro-antd/modal';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NzButtonModule } from 'ng-zorro-antd/button';
import { NzInputModule } from 'ng-zorro-antd/input';
import { NzStepsModule } from 'ng-zorro-antd/steps';
import { NzFormModule } from 'ng-zorro-antd/form';
import { NzGridModule } from 'ng-zorro-antd/grid';
import { NzOptionComponent, NzSelectComponent } from 'ng-zorro-antd/select';
import { User } from '../../models/user';
import { UserService } from '../../services/user.service';

@Component({
  selector: 'app-user-create',
  standalone: true,
  templateUrl: './user-create.component.html',
  imports: [
    ReactiveFormsModule,
    FormsModule,
    CommonModule,
    NzButtonModule,
    NzInputModule,
    NzStepsModule,
    NzFormModule,
    NzGridModule,
    NzOptionComponent,
    NzSelectComponent
  ]
})
export class UserCreateComponent {
  @Input() userData: any;

  formData: User = {
    name: '',
    username: '',
    email: '',
    role: '',
    password: '',
  };

  isSubmitting: boolean = false;

  constructor(
    private modal: NzModalRef,
    private userService: UserService
  ) {}

  ngOnInit(): void {
    if (this.userData) {
      this.formData = {
        ...this.formData,
        ...this.userData,
      };
    }
  }

  submitForm(): void {
    if (this.isSubmitting) {
      return;
    }
    this.isSubmitting = true;

    console.log('Form Data:', this.formData);
    this.userService.create(this.formData).subscribe({
      next: (response) => {
        console.log('User created successfully:', response);
        this.modal.destroy(this.formData);
        this.isSubmitting = false;
      },
      error: (error) => {
        console.error('Error creating user:', error);
        this.isSubmitting = false;
      }
    });
  }

  cancel(): void {
    this.modal.destroy();
  }
}






























 formData : User = {
  //   name: '',
  //   username: '',
  //   email: '',
  //   role: '',
  //   password: '',
  // };


  formData : User = {
    name: this.userData.name,
    username: this.userData.name,
    email: this.userData.name,
    role: this.userData.name,
    password: this.userData.name,
  };


















@Component({
  selector: 'app-user-create',
  standalone: true,

  templateUrl: './user-create.component.html',




  export class UserCreateComponent  {

    https://demo.templatemonster.com/

    https://themes.getbootstrap.com/
    
    Modèle de site Web multipage Bootstrap 5 pour la finance et la banque